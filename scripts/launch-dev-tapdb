#!/bin/bash

. $(dirname $0)/wait-for-network.sh

IMG=$1
CTR=$2
CONFIG=$3

if [ -z "$IMG" ]; then
        echo "usage: $0 <image> <container> <init-content-schema.sh>"
        exit
fi
if [ -z "$CTR" ]; then
	echo "usage: $0 <image> <container> <init-content-schema.sh>"
	exit
fi
if [ -z "$CONFIG" ]; then
	echo "usage: $0 <image> <container> <init-content-schema.sh>"
	exit
fi

if [ ! -f $CONFIG ]; then
    echo "not found: $CONFIG"
    exit
fi

echo "creating: $CTR using $CONFIG"


# create container from local image
lxc init $IMG $CTR || exit

# inject init-content-sh
lxc file push $CONFIG $CTR/usr/local/bin/init-content-schemas.sh
## compat for 12
#lxc file push $CONFIG $CTR/tmp/init-content-schemas.sh

# attach external directory for storage
#if [ -d /data/local/volumes/$CTR ]; then
#        echo "attaching /data/local/volumes/$CTR"
#	lxc config device add $CTR data disk \
#    		path=/var/lib/pgsql/data source=/data/local/volumes/$CTR
#else
#	echo "not found: /data/local/volumes/$CTR"
#	exit -1 
#fi

# set resource limits 
lxc config set $CTR limits.cpu 2
lxc config set $CTR limits.memory 256MB
lxc config set $CTR limits.memory.enforce soft
lxc config set $CTR limits.memory.swap false

#  increase the I/O priority of a DB container to the maximum
#lxc config set $CTR limits.disk.priority 10


# start container
lxc start $CTR || exit
waitForNetwork $CTR

lxc exec $CTR -- cat /usr/local/bin/init-content-schemas.sh

